digraph "DataFlow Graph for 'Fact5' function" {
	label="DataFlow Graph for 'Fact5' function";

	subgraph cluster_Entry { 
		Constant1fact[type = Constant, in = "inControl", out = "out", value = 1];
		Constant2i[type = Constant, in = "inControl", out = "out", value = 2];
		Constant3n[type = Constant, in = "inControl", out = "out", value = 5];
		label = "Entry"
	}
	subgraph cluster_While_cond { 
		Merge1[type = Merge, channel_width = 2, in = "in1 in2", out = "out"];
		Merge2[type = Merge, channel_width = 2, in = "in1 in2", out = "out"];
		Merge3[type = Merge, channel_width = 2, in = "in1 in2", out = "out"];
		Fork1[type = Fork, channel_width = 2, in = "in", out = "out1 out2"];
		Fork2[type = Fork, channel_width = 2, in = "in", out = "out1 out2"];
		LET1[type = Operator, in = "in1 in2", out = "out", op = leq, latency = 0, II = 0];
		Fork3[type = Fork, channel_width = 3, in = "in", out = "out1 out2"];
		Branch1[type = Branch, in = "in inCondition?:1", out = "outTrue+ outFalse-"];
		Branch2[type = Branch, in = "in inCondition?:1", out = "outTrue+ outFalse-"];
		Branch3[type = Branch, in = "in inCondition?:1", out = "outTrue+ outFalse-"];
		label = "While_cond"
	}
	subgraph cluster_While_body { 
		Fork4[type = Fork, channel_width = 2, in = "in", out = "out1 out2"];
		Add1[type = Operator, in = "in1 in2", out = "out", op = add, latency = 0, II = 0];
		Mul1[type = Operator, in = "in1 in2", out = "out", op = mul, latency = 0, II = 0];
		Constant4constIncr[type = Constant, in = "inControl", out = "out", value = 1];
		label = "While_body"
	}
	subgraph cluster_While_end { 
		Ret1[type = Exit, in = "dataIn"];
		Exit1[type = Exit, in = "controlIn:0"];
		label = "While_end"
	}

	fact -> mergeFact [from = out, to = in1];
	i -> mergeI [from = out, to = in1];
	n -> mergeN [from = out, to = in1];
	mergeN -> forkN [from = out, to = in];
	mergeI -> forkI [from = out, to = in];
	forkN -> opIcmp [from = out1, to = in1];
	forkN -> branchN [from = out2, to = in];
	forkI -> opIcmp [from = ou1, to = in2];
	forkI -> branchI [from = out2, to = in];
	mergeFact -> branchFact [from = out, to = in];
	opIcmp -> forkCmp [from = out, to = in];
	forkCmp -> branchN [from = out1, to = inCondition];
	forkCmp -> branchI [from = out2, to = inCondition];
	forkCmp -> branchFact [from = out3, to = inCondition];
	branchN -> mergeN [from = outTrue, to = in2];
	branchI -> forkI2 [from = outTrue, to = in];
	branchFact -> opMul [from = outTrue, to = in1];
	branchFact -> opRet [from = outFalse, to = in];
	constIncr -> opAdd [from = out, to = in1];
	forkI2 -> opAdd [from = out1, to = in2];
	forkI2 -> opMul [from = out2, to = in2];
	opAdd -> mergeI [from = out, to = in2];
	opMul -> mergeFact [from = out, to = in2];

}
